[Source :https://www.youtube.com/watch?v=RBSGKlAvoiM]


Data Structure:

A Data Structure is a way of organizing data so that it can be used effectively


Abstract Data Type(ADT):

An abstract data type is an abstraction of a data structure which provides only the interface to which a data structure must adhere to.The interface does not give any speific details about how something should be implemented or in what programming language

ADT			Implementation
---			--------------
List 			Dynamic Array,Linked List
Queue 			Linked List based Queue,Array based Queue,Stacked based Queue
Map 			Tree Map, Hash Map,Hash Table
Vehicle 		Cart,Bicycle,Smart Car

Big O Notation:

> Big O notation gives an upper bound of the complexity in the worst case

complexities ordered in form smallest to largest

constant time : O(1)
Logarithemic time : O(log(n))
Linear time : O(n)
Linearithmic time : O(nlog(n))a
Quadatic time : O(n*2)
Cubic time : O(n*3)
Exponential time : O(b*n), b>1
Factorial time : O(n!)

Big O examples:
-------------
> finding all subsets of set - O(2*n)
> finding all permutations of a string -O(n!)
> Sorting using merge sort - O(nlog(n))
> iterating over all the cells in a matrix of size n by m - O(nm)

Static and Dynamic Arrays:

Complexity:

		Static		Dynamic Array

Access		O(1)		O(1)
Search		O(n)		O(n)
Insertion	Not Applicable  O(n)
Appending	NA 		O(1)
Deletion	NA 		O(n)

Singly and Doubly Linked List:
-----------------------------
linked List:
> A linked list is a sequential list of nodes that hold data which point to other nodes and also contains data
> used in list,stack and queues, used in hastable implementations to deal with hastable collisions
> singly will contain pointer to next node, doubly will have pointer to previous and next node



					Singly			Doubly

Search					o(n)			o(n)

Insert at head				o(1)			o(1)

Insert at tail				o(1)			o(1)

remove at head				o(1)			o(1)

Remove at tail				o(n)			o(1)

Remove in middle			o(n)			o(n)

Note: time complexity to the remove tail of singly linked list is linear -o(n) where as for doubly linked list is o(1),why ?? -> In order to delete a node and connect the previous and the next node together, you need to know their pointers. In a doubly-linked list, both pointers are available in the node that is to be deleted. The time complexity is constant in this case, i.e., O(1).

Whereas in a singly-linked list, the pointer to the previous node is unknown and can be found only by traversing the list from head until it reaches the node that has a next node pointer to the node that is to be deleted. The time complexity in this case is O(n).

[source : https://medium.com/@maximohinojosa/implementing-a-singly-linked-list-9596a05a6f5b]
Why use a linked list over an array? Well a linked list has an advantage that arrays does not have where values can be efficiently inserted and removed without relocating the rest of the list

[Source : https://stackabuse.com/linked-lists-in-detail-with-python-examples-single-linked-lists/]


> Before we study what are linked lists, let's first briefly review how Arrays store data. In arrays, the data is stored at contiguous memory locations. For instance, if the first item in the array is stored at index 10 of the memory and is of size 15 bytes, the second item will be stored at index 10+15+1 = 26th index. Therefore, it is straight forward to traverse an array.

> Linked Lists, on the other hand, are different. Linked lists, do not store data at contiguous memory locations. For each item in the memory location, linked list stores value of the item and the reference or pointer to the next item


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
STACKS :

> code : [source: https://github.com/williamfiset/data-structures/tree/master/com/williamfiset/datastructures/stack]
> A stack is a one eneded linear data structure which models a real world stack by having two primary operations,namely push and pop
when and where is a stack used
> Used by undo mechanisms in text editors.
> used in compiler sysntax checking for matching brackets and braces
> can be used to model a pile of books or plates:
> Used behind the scenes to support recursion by keeping track of previous funtion calls.
> Can be used to do a Depth First Search  on a graph

Queues:

> A queue is linear data structure which models real world queues by having two primary operation, namely enqueue and dequeue

when and where is queue is used:

> Any waiting line models as queue.
> Can be used to efficiently keep track of the x most recently added elements.
> Web server request management where you want first come first serve.
> Breadth first search graph traversal.


Priority Queue:

> A priority queue is an abstract data type that operates similar to a normal queue except that each element has a certain priority.The priority of the elements in the priority queue determine the order in which elements are removed from the PQ.

Note : PQ only supports comparable data, meaning the data inserted into the priority queue must be able to be ordered in some way either from least to greates or greatest to least. This is so that we are able to assign relative priorities to each element

Heap:
> Aheap is a tree based DS that statisfies the heap invariant- also called heap property: If A is a parent node of B then A is ordered with respect to B for all nodes A,Bin the heap. Two types of heaps, max heap and min heaps.Every node in heap is binary which means every node has two children.And heaps can also have two or more children which is called bionomial heaps. All heaps must be trees, which mean it should not be in cycles like one child has two parent nodes.

When and where PQ is used:
> used in cetain implementations of Dijkstra shortest path algo
> Anytime you need the dynamically fetch the next best or next worst element.
> Used in Huffman coding(Which is often used for lossless data compression).
> Best First Search algorithms such as A* use PQs to continously grab next most promising node.
> Used by Minimum spanning Tree - mst algo
















