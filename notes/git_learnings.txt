======================================================
https://www.vogella.com/tutorials/Git/article.html
======================================================
A file in the working tree of a Git repository can have different states. These states are the following:

	> untracked: the file is not tracked by the Git repository. This means that the file never staged nor committed.

	> tracked: committed and not staged

	> staged: staged to be included in the next commit

	> dirty / modified: the file has changed but the change is not staged


> git add - is staged
> commit the staged changes into the Git repository via the git commit command
> After adding the selected files to the staging area, you can commit these files to add them permanently to the Git repository. Committing creates a new persistent snapshot (called commit or commit object) of the staging area in the Git repository. A commit object, like all objects in Git, is immutable.
> git checkout HEAD~1 will actually GO/checkout to that reference/commit
> git reset HEAD~3 will uncommit your last 3 commits — without removing the changes, ie you can see all the changes made in the last 3 commits together, remove anything you don't like or add onto it and then commit them all again.

> git clean -f will remove untracked files
> The staging area is the place to store changes in the working tree before the commit. The staging area contains a snapshot of the changes in the working tree (changed or new files) relevant to create the next commit and stores their mode (file type, executable bit).
> git checkout <branch name> -> switches to another branch

$ git checkout feature
$ git merge master


> You decide to run git rebase dev from your feature branch to get up-to-date with dev.
However when you run the rebase command, there are some conflicts between the changes you made on feature and the new commits on dev. Thankfully, the rebase process goes through each commit one at a time and so as soon as it notices a conflict on a commit, git will provide a message in the terminal outlining what files need to be resolved. Once you’ve resolved the conflict, you git add your changes to the commit and run git rebase --continue to continue the rebase process. If there are no more conflicts, you will have successfully rebased your feature branch onto dev

> https://medium.com/osedea/git-rebase-powerful-command-507bbac4a234


> git init
> git add . (add files to staging area)
> git commit -m "Initial commit"
> git log
> git show (command to see the changes of a commit)
> git checkout (command to reset a tracked file (a file that was once staged or committed) to its latest staged or commit state. The command removes the changes of the file in the working tree. This command cannot be applied to files which are not yet staged or committed)
> git checkout -b branch_name (switching new branch)
>git remote add upstream git@gitlab.spire2grow.com:core-prototypestagcloud-feedback-engine.git
> git remote -v
> git pull upstream branchname
> -Pushing to the new branch
git push <remote-name> <branch-name> (git push -u origin master)
> git pull command allows you to get the latest changes from another repository for the current branch
> lists all branches including the remote branches
git branch -a
> git branch <name> (creating branch name)
  git  branch  <branch _name>  <commit id> (creating branch form commit id)
> git branch -m [old_name] [new_name] (re naming branch)
> git branch -d <branch name> (deleting a branch)
> git diff master your_branch (different between branches)
> git show <commit_id> (To see the changes introduced by a commit)
> See the difference between two commits
		# directly between two commits
			git diff HEAD~1 HEAD

		# using commit ranges
			git diff  HEAD~1..HEAD
> The git blame command allows you to see which commit and author modified a file on a per line base.
> git checkout [commit_id]