
> for quick reference of dart syntax refer : {Source : https://dart.dev/samples}


> premitive datatypes:
// numbers - int,float
//strings - "hello"
//booleans
//lists - aka arrays -list<int>
//maps -hashmaps
//runes - unicode character sets
//symbols - #symbol

void main() {
   var x = (a, b) {
     print("Hello, from closure: ${a + b}");
  }(20, 30.0);

 > above code we have used clousers ,clousers are also called anonymus functions
 > dynamic x=5 -> we can assign any type of value to x since it is delared as dynamic eg : x="hello", it will override to string
 > var x=5 and change to x="hellow" -> will throw error

> you can change the type of x, but not a
void main() {
  dynamic x = 'hal';
  x = 123;
  print(x);
  var a = 'hal';
  a = 123;
  print(a);
}

dynamic: can change TYPE of the variable, & can change VALUE of the variable later in code.

var: can't change TYPE of the variable, but can change VALUE of the variable later in code.

final: can't change TYPE of the variable, & can't change VALUE of the variable later in code.




 // dynamic -> generalizes all types
 // object -> all types are derived from object

 > string interpolation 

 var x=10
 var y=20
 var a = "add numbers :$x and $y ${x+y}";
 // num is a prent of int and double
 // object is the parent for all objects in dart


 > Cascade notation (..)

Cascades (..) allow you to make a sequence of operations on the same object. In addition to function calls, you can also access fields on that same object. This often saves you the step of creating a temporary variable and allows you to write more fluid code.

Consider the following code:

querySelector('#confirm') // Get an object.
  ..text = 'Confirm' // Use its members.
  ..classes.add('important')
  ..onClick.listen((e) => window.alert('Confirmed!'));

The first method call, querySelector(), returns a selector object. The code that follows the cascade notation operates on this selector object, ignoring any subsequent values that might be returned.

The previous example is equivalent to:

var button = querySelector('#confirm');
button.text = 'Confirm';
button.classes.add('important');
button.onClick.listen((e) => window.alert('Confirmed!'));

another example :
List list = [];
list.add(color1);
list.add(color2);
list.add(color3);
list.add(color4);

// with cascade

List list = [];
list
  ..add(color1)
  ..add(color2)
  ..add(color3)
  ..add(color4);


> dart 2.3 has a spread operator(...) which is equal to cascade, we need not use add() function

var a = [0,1,2,3,4];
var b = [6,7,8,9];
var c = [...a,5,...b];


> constructor:

class complex{
	num real;
	num imaginary;
	complex(this.real,this.imaginary); //constructor for the class complex

  @override
  bool operator ==(other) {
    if (!(other is Complex)) {
      return false;
    }
    return this._real == other._real && this._imaginary == other._imaginary;
  }

  @override
  String toString() {
    if (this._imaginary >= 0) {
      return '${this._real} + ${this._imaginary}i';
    }
    return '${this._real} - ${this._imaginary.abs()}i';
  }
}

Named constructor:(from above code)

  Complex(this._real, this._imaginary);

  Complex.real(num real) : this(real, 0);

  Complex.imaginary(num imaginary) : this(0, imaginary);

var c2 = complex(5,4)
var r = complex.real(10)// named constructor,10 is set for real and 0 for imaginary value
var i = complex.imaginary(-4)// named constructor

> if we want to make an object private then prepend name with '_'

class Complex {
  num _real;    // private variable
  num _imaginary;

  get real => _real;	// getter
  set real(num value) => _real = value; // setter

  get imaginary => _imaginary;
  set imaginary(num value) => _imaginary = value;
  }

inheritance:

class Quaternion extends Complex {
  num jImage;

  Quaternion(
    num real,
    num imaginary,
    this.jImage,
  ) : super(
          real,
          imaginary,
        );

> var numbers = Iterable.generate(1000, (i) => i);
we can access first and last values of iterables numbers.first(),numbers.last()
> we can convert iterable to list,toset ,to string 
// var list = numbers.toList();
// var s = numbers.toSet();
// var str = numbers.toString();

> we can use mixins with keywork 'with'
>
 // print(
  //   numbers
  //       .takeWhile(
  //         (n) => n < 10,
  //       )
  //       .toList(),
  // );



> take while -> takes values till the condition is false, they are lazy,

  // print(
  //   numbers.take(10).map((n) => n * 2).toList(),
  // );

  // print(numbers.any((n) => n % 2 == 0));

  // print(numbers.every((n) => n % 2 == 0));
   // print(
  //   numbers.where((n) => n % 2 == 0).toList(),
  // );
  // print(numbers.reduce((prev, i) => prev + i));
>>
 import 'dart:math' as Math;
  print(numbers.reduce(Math.min));
  print(numbers.reduce(Math.max));

>>
  Map<int, int> map = Map.fromIterable(
    numbers.take(10),
  );
  var newMap = map.map(
    (int k, int v) => MapEntry(k, k + v),
  );

factory constructor :
// class Animal {
//   String type;

//   factory Animal(String type) {
//     if (type == "cat") {
//       return Cat(type);
//     } else if (type == "dog") {
//       return Dog(type);
//     } else {
//       throw AnimalException(type);
//     }
//   }

//   Animal._type(this.type);
// }


> .. are cascade operators  (it means this.)

> factory point constructor(should read about it)
>>
// class Point {
//   final String name;
//   int _x;
//   int _y;

//   int get x => _x;
//   int get y => _y;

//   int get add => _x + y;


//   void set x(val) {
//     _x = val;
//   }

//   void set y(val) {
//     _y = val;
//   }

//   static final Map<String, Point> _cache = <String, Point>{};

//   Point(this._x, this._y, {this.name});

//   Point.zero() : name = "zero" { ############ this is because name field is declared final in the 																		class,point.zero is a named constructor
//     _x = 0;
//     _y = 0;
//   }

> link : https://steemit.com/utopian-io/@tensor/the-fundamentals-of-zones-microtasks-and-event-loops-in-the-dart-programming-language-dart-tutorial-part-3


Named arguments :
---------------
findVolume(int length, int breath, {int height=<defalut value>}) {
 print('length = $length, breath = $breath, height = $height');
}

findVolume(10,20,height:30);
-> height is the named argument here,named arguments are surrounded by {}



Typedef:
A typedef, or function-type alias, gives a function type a name that you can use when declaring fields and return types. A typedef retains type information when a function type is assigned to a variable.

typedef ManyOperation(int firstNo , int secondNo); 
//function signature  

Add(int firstNo,int second){ 
   print("Add result is ${firstNo+second}"); 
} 
Subtract(int firstNo,int second){ 
   print("Subtract result is ${firstNo-second}"); 
}
Divide(int firstNo,int second){ 
   print("Divide result is ${firstNo/second}"); 
}  
Calculator(int a, int b, ManyOperation oper){ 
   print("Inside calculator"); 
   oper(a,b); 
}  
void main(){ 
   ManyOperation oper = Add; 
   oper(10,20); 
   oper = Subtract; 
   oper(30,20); 
   oper = Divide; 
   oper(50,5); 
} 

> Typedefs can also be passed as a parameter to a function.

typedef ManyOperation(int firstNo , int secondNo);   //function signature 
Add(int firstNo,int second){ 
   print("Add result is ${firstNo+second}"); 
}  
Subtract(int firstNo,int second){
   print("Subtract result is ${firstNo-second}"); 
}  
Divide(int firstNo,int second){ 
   print("Divide result is ${firstNo/second}"); 
}  
Calculator(int a,int b ,ManyOperation oper){ 
   print("Inside calculator"); 
   oper(a,b); 
}  
main(){ 
   Calculator(5,5,Add); 
   Calculator(5,5,Subtract); 
   Calculator(5,5,Divide); 
} 



> In Dart, everything is, by default, public. To mark something private we use the _ (underscore) character. We can also use the @protected annotation provided by the meta Dart package. When added to a class member, it indicates the member should be used only inside the class or its subtypes.

======================================================
https://www.youtube.com/watch?list=PLJbE2Yu2zumDjfrfu8kisK9lQVcpMDDzZ&v=8F2uemqLwvE&feature=emb_logo
======================================================

> pub - package manager for dart

> link : https://medium.com/run-dart/dart-dartlang-introduction-advanced-dart-features-524de79456b9

> link : https://medium.com/flutter-community/dart-what-are-mixins-3a72344011f3

> link :  https://medium.com/@jelenaaa.lecic/what-are-in-dart-df1f11706dd6

> link : https://github.com/erluxman/awesomefluttertips



======================================================
https://www.youtube.com/watch?list=PLJbE2Yu2zumDjfrfu8kisK9lQVcpMDDzZ&v=8F2uemqLwvE&feature=emb_logo
======================================================

> classes in dart:

eg:


import 'dart:math';

class Position {
  // properties
  int x;
  int y;

  // methods
  double distanceTo(Position other) {
    var dx = other.x - x;
    var dy = other.y - y;
    return sqrt(dx * dx + dy * dy);
  }
}

main() {
  var origin = new Position()
    ..x = 0
    ..y = 0;

  var p = new Position()
    ..x = -5
    ..y = 6;

  print(origin.distanceTo(p));
}

