[source: https://medium.com/flutter-community/handling-network-calls-like-a-pro-in-flutter-31bd30c86be1]
> good to read the article

[source: https://stackoverflow.com/questions/60648984/handling-exception-http-request-flutter]

Error handling:

Creating an API base helper class
For making communication between our Remote server and Application we use various APIs which needs some type of HTTP methods to get executed. So we are first going to create a base API helper class, which will be going to help us communicate with our server.

>>>
import 'CustomException.dart';
import 'package:http/http.dart' as http;
import 'dart:io';
import 'dart:convert';
import 'dart:async';
import 'package:connectivity/connectivity.dart';

class APIManager {

  Future<dynamic> postAPICall(String url, Map param) async {
    print("Calling API: $url");
    print("Calling parameters: $param");

    var responseJson;
    try {
      final response =  await http.post(url,
      body: param);
      responseJson = _response(response);
    } on SocketException {
      throw FetchDataException('No Internet connection');
    }
   return responseJson;
}

dynamic _response(http.Response response) {
switch (response.statusCode) {
  case 200:
    var responseJson = json.decode(response.body.toString());
    return responseJson;
  case 400:
    throw BadRequestException(response.body.toString());
  case 401:

  case 403:
    throw UnauthorisedException(response.body.toString());
  case 500:

  default:
    throw FetchDataException(
        'Error occured while Communication with Server with StatusCode : 
  ${response.statusCode}');
   }
  }
}

Creating CustomException Class

An HTTP request on execution can return various types of status codes based on its status. We don’t want our app to misbehave if the request fails so we are going to handle most of them in our app. For doing so are going to create our custom app exceptions which we can throw based on the response status code.
>>>
class CustomException implements Exception {
  final _message;
  final _prefix;

  CustomException([this._message, this._prefix]);

  String toString() {
  return "$_prefix$_message";
  }
}

class FetchDataException extends CustomException {
  FetchDataException([String message])
  : super(message, "Error During Communication: ");
}

class BadRequestException extends CustomException {
  BadRequestException([message]) : super(message, "Invalid Request: ");
}

class UnauthorisedException extends CustomException {
  UnauthorisedException([message]) : super(message, "Unauthorised: ");
}

class InvalidInputException extends CustomException {
  InvalidInputException([String message]) : super(message, "Invalid Input: ");
}

Creating a class to fetch data from APIs

Calling API for fetching data from the API

void signIn(Map param)  {
  setState(() {
    _isLoading = true;
  });
  apiManager.postAPICall(BASE_URL + user_login, param).then((value) {
    var status_code = value["statuscode"];
    if (status_code == 200) {
      var userData = value["user_data"];
      Navigator.push(context, PageTransition(type: 
      PageTransitionType.rightToLeftWithFade, child: HouseholderHomeScreen()));

      setState(() {
        _isLoading = false;
      });
    } else {
      setState(() {
        _isLoading = false;
      });
      _scaffoldKey.currentState.showSnackBar(
          SnackBar(
            content: new Text(value["msg"]),
            backgroundColor: Colors.red,
            duration: new Duration(seconds: 2),
          )
      );
    }
 }, onError: (error) {
    setState(() {
      _isLoading = false;
    });
    print("Error == $error");
    _scaffoldKey.currentState.showSnackBar(
      SnackBar(
        content: new Text('Something went wrong..'),
        duration: new Duration(seconds: 2),
      )
    );
    print(error);
  });
}


what if we wanted to “hide” the widget completely, if person.IsLeaving is false and only display Text(‘goodbye’) if it’s true
>> [
  if(person.IsGreeting) Text('hello'),
  person.isLeaving ? Text(‘goodbye’) 
                   : SizedBox.shrink(),
];
> SizedBox.shrink() is a quick way to return an empty widget. SizedBox has no child, no height or width.
