[source : http://thesecretlivesofdata.com/raft/#intro]

What is distributed consensu:

> Lets say we have single node system.For example you can thing of our node as a database server that stores a single value(X).We also have a client that can send a value to the server(8).Coming to agreement, or consensus, on that value is easy with on node.But how do we come to consensus if we have a multiple nodes.Thats the problem of distributed consensus.
>  Raft is a protocol for implementing distributed consensus.

[source: http://thesecretlivesofdata.com/raft/#overview]

>  A node can be one of three states- follower,candidate,leaderstate

> all nodes start in the follower state
> if followers dont hear from a leader then they can become a candidate (one of the node)
> The candidate then requests votes from other nodes
> nodes will reply with their vote,
> The candidate becomes the leader if it gets votes from a majority of nodes
> The process is called leader Election
> All changes to the system now go through the leader (set 5)
> Each change is added as an entry in the nodes's log
> The log entry is currently uncommitted so it won't update the nodes's value
> To commit the entry the leader node first replicates it to the follower nodes
> then the leader waits untill a majority of nodes have written the entry.
> The entry is now committed on the leader node and the node state is "5"
> The leader then notifies the followers that the entry is committed
> The cluster has now come to consensus about the system state
> The process is called log Replication

Leader election:

> in raft there are two timeout settings which control elections.
> First is the election time out
> The election timeout is the amount of time a follower waits untill becoming a candidate
> After the election timeout the follower becomes a candidate and starts a new election term
> ... votes for itself
> ... and sends out request vote messages to other nodes.
> If the receiving node hasn't voted yet in this term then it votes for the candidate..
> .. and the node resets its election timeout.
> Once a candidate has a majority of votes it becomes leader.
> The leader begins sending out Append entries messages to its followers.
> Followers then respond to each append entries messages
> This election term will continue untill a follower stops receiving heartbeats and becomes a candidate.
> Let's stop the leader and watch a re-election happen.
> now another node will become candidate note and the process continues for term2
> Requiring a majority of votes guarantees that only one leader can be elected per term
> If two nodes become canidate at the same time then a split vote can occur
> Let's take a look at a split vote example
> now there are three nodes A,B,C,D
> Two nodes both start an election for the same term..
> .. and each reaches a single follower node before the other
> Now each candidate ahs 2votes and can receive no more for the term
> The nodes will wait for electin to happen again
> Node C received a majority of votes in term 5 so it becomes leader

Log Replication:
--------------

> Once we have a leader elected we need to replicate all changes to our system to all nodes.
> This is done by using the same Append entires message that ws used for heartbeats
> let's walk thourgh the process
> First a client sends a change to the leader.(set 5)
> The change is appendex to the leaders log..  
> ..then the change is sent to the followers on the next heartbeat
> An entry is commited by leader once a majority of followers acknowledge it..
> and the response is sent to the client
> Now let's send a command to increment the value by '2'(Add 2)
> our system value is now updated to "2"
> Raft can even stay consistent in the ace of netrwork partitions.
> Let's add a partition to separate Aand B from c,d and e
> Because of our patitions we now have two leaders in different terms
> Lets add another client and try to update both leaders
> One client will try to set the value of node B to "3"
> Node B cannot replicate to majority so its log entry stays uncommitted.
> The other client will try to set the value of node C to "8"
> This will succeed because it can replicate to a majority.
> Now let's heal the network partition.
> Node B will see the higher election term and step down. (c will be the leader)> Both nodes A and B will roll back their uncommitted entries and match the new leader's log (ie. Add and set command will be revoked)
>  Both nodes A and B will roll back their uncommitted entires and match the nw leader's log.
> Our log is now consistent across our cluster
>
