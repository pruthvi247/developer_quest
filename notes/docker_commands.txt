=======================
======= Docker ========
=======================
Create snapshot/image out of container:
———————————————————-------------------

> docker  commit -c ‘CMD[“name of image”]’<container id>
	- to create image out out of container

dockercompose commands:
----------------------

> docker-compose up -d
> dociker-compose ps
> docker-compose down
> docker-compose up --build
> docker-compose ps will look for docker-compose.yml file,
 so we should execute in the same folder where we have compose file

sample docker compose file:
-------------------------
version: ‘3’
Services:
	resids-server:
		image: 'redis'

	node-app:
		restart: always
		build: .
		ports:
			- "4001:8081"

Duplicating Dependencied:
-------------------------
docker volumes:
	> syntax : docker run -p port:port -v /workdir/folerpathinsidedocker -v $(pwd):/workingdirectory <image id>

		{ 

		form above syntax -v with ":" says that map the folders inside docker to source folder of host machine
			-v with out ":" says that don't map the path in docker to host machine and take everying form docker

		-> example : docker run -it --name <imageid> -p 8080:80 -v /sourceDirectory/:/wokingDirectory

		-> docker run -p 8165:8888 -d -it --rm --name scaling_demo_mani --mount type=bind,source=/home/manikandan.ramar/pyscale/scaling-demo/,target=/usr/src/app py_scale_image_mani

		}
	docker-compose for volume mounting :
					version: ‘3’
					Services:
						resids-server:
							image: 'redis' 

						node-app:
							restart: always
							build: 
								context : /path_to_dockerfile
								dockerfile: Dockerfile_name
							ports:
								- "4001:8081"
							volumes:
								- /path_not_to_map
								- /path_outside_container:/path_inside_container
Docker Attach:
-------------
> docker attach will connect host terminal to stdin,stdout,stderror of container

multi step docker build:
----------------------
docker file:
{
	when we want the funtionality of two images we use multi tstep docker build,where we create temporary image and copy contents of that to second container.so in the below exampe we first built an image node:alpine and install dependecies, after that we are copying folder from the image that has been built to second image/container that is nginx,in the case of nginx it is /usr/share/nginx/html which is workdir.
}

FROM node:alpine as builder
WORKDIR /usr/src/app
COPY . .
RUN npm install
RUN   npm run build

FROM nginx
COPY --from=builder /path_to_folder_in_firstimage /path_to_folder_second_image

Environment Variables:
----------------------
1) set a variable in the container at run time.(variableName=value)
2) set a variable in the container at run time ,value is taken form "host machine",(variableName)

docker-compose.yml:

version: ‘3’
Services:
	resids-server:
		image: 'redis' 

	node-app:
		restart: always
		build: 
			context : /path_to_dockerfile
			dockerfile: Dockerfile_name
		ports:
			- "4001:8081"
		volumes:
			- /path_not_to_map
			- /path_outside_container:/path_inside_container
		environment:
			- REDIS_HOST = "redis-server"
			- REDIS_PORT = "6379 "
	nginx:
		restart:always
		build:
			dockerfile : Dockerfile.nginx
			context: ./nginx
		ports:
			- '9000:80'



