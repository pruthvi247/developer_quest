 Book : Design patterns - elements of reusable object orineted software
 ----------------------------------------------------------------------
chapter:1
---------
 > The first criterion, called purpose, reflects what a pattern does. Patterns can have either creational, structural, or behav- ioral purpose. Creational patterns concern the process of object creation. Structural patterns deal with the composition of classes or objects. Behavioral patterns character- ize the ways in which classes or objects interact and distribute responsibility

 >  Some patterns are alternatives: Prototype is often an alternative to Abstract Factory. Some patterns result in similar designs even though the patterns have different intents. For example, the structure diagrams of Composite and Decorator are similar.

 >  Class inheritance defines an object's implementation in terms of another object's implementation. In short, it's a mechanism for code and representation sharing. In contrast, interface inheritance (or subtyping) describes when an object can be used in place of another.

 > Program to an interface, not an implementation.
 > Favor object composition over class inheritance.

 > Class inheritance is defined statically at compile-time.Object composition is defined dynamically at run-time through objects acquiring refer- ences to other objects.

> Separate what-to-do part from when-to-do part.
> Ensure that when part knows as little as possible about what part; and vice versa.


> [source: ]Inversion of control : https://stackoverflow.com/questions/3058/what-is-inversion-of-control
> [source: ]https://martinfowler.com/articles/injection.html

	> If there's more than one way to do it, create multiple constructors that show the different combinations.
	> Another advantage with constructor initialization is that it allows you to clearly hide any fields that are immutable by simply not providing a setter
	> If you have multiple ways to construct a valid object, it can be hard to show this through constructors, since constructors can only vary on the number and type of parameters. This is when Factory Methods come into play, these can use a combination of private constructors and setters to implement their work
	> Three types of injections(dependecy injection) : 1.constructor injection 2. setter injection 3. interface injection
	> If you use Dependency Injection there are a number of styles to choose between. I would suggest you follow constructor injection unless you run into one of the specific problems with that approach, in which case switch to setter injection. If you are choosing to build or obtain a container, look for one that supports both constructor and setter injection





chapter 2:
---------

Strategy pattern:

> Encapsulating an algorithm in an object is the intent of the Strategy (315) pattern. The key participants in the pattern are Strategy objects (which encapsulate different algorithms) and the context in which they operate.
> You shouldn't have to change the strategy or context interface to support a new algorithm.

Decorator pattern:
-----------------
> The Decorator (175) pattern captures class and object relationships that support em- bellishment by transparent enclosure. In the Decorator pattern, embellishment refers to anything that adds responsibilities to an object

Factory pattern:

> We say that factories create product objects. Moreover, the products that a factory produces are related to one another; in this case, the products are all widgets for the same look and feel.
> This pattern captures how to create families of related product objects without instantiating classes directly.

Bridge Pattern:

>  intent behind Bridge is to allow separate class hierarchies to work together even as they evolve independently.

Command pattern:

> The Command pattern prescribes a uniform interface for issuing requests that lets you configure clients to handle different requests.

vistor pattern:

>  The Visitor pattern captures the technique we've used to allow an open-ended number of analyses of glyph structures without having to change the glyph classes themselves.An important question to ask yourself before applying the Visitor pattern is, Which class hierarchies change most often? The pattern is most suitable when you want to be able to do a variety of different things to objects that have a stable class structure


Chapter 3: - Creational design patterns
---------------------------------------


> Creational design patterns abstract the instantiation process. They help make a system independent of how its objects are created, composed, and represented. A class cre- ational pattern uses inheritance to vary the class that's instantiated, whereas an object creational pattern will delegate instantiation to another object.
> Creational patterns become important as systems evolve to depend more on object composition than class inheritance.
> There are two recurring themes in these patterns.First,they all encapsulate knowledge about which concrete classes the system uses. Second, they hide how instances of these classes are created and put together.


# Abstract Factory Pattern :

Intent: Provide the interface for creating families of related or dependent objects with out specifying their concrete classes

Applicability
Use the Abstract Factory pattern when
• a system should be independent of how its products are created,composed, and represented.
• a system should be configured with one of multiple families of products.
• a family of related product objects is designed to be used together, and you need to enforce this constraint.
• you want to provide a class library of products,and you want to reveal just their interfaces,not their implementations.

[Source : https://dzone.com/articles/factory-method-vs-abstract]

> Factory Method depends on inheritance to decide which product to be created. There’s no separate and dedicated class for creation of a Product
> On the other side, in Abstract Factory, there’s a separate class dedicated to create a family of related/dependent Products, it uses composition

> If we think of just a product creation facility and the client that uses it, it is clear that in Factory Method, we are restricted to use inheritance(class based) and in Abstract Factory we have the flexibility of composition (object based) to create specific Products.

> Abstract Factory is one level higher in abstraction than Factory Method. Factory Method abstracts the way objects are created, while Abstract Factory also abstracts the way factories are created which in turn abstracts the way objects are created.

> Abstract Factory is at higher level in abstraction, it often uses Factory Method to create the products in factories.
[END]

> good example for factory and abstract factory are found here [source : https://www.codeproject.com/Articles/716413/Factory-Method-Pattern-vs-Abstract-Factory-Pattern ]

Builder Pattern:
--------------
[Source : https://www.codeproject.com/Articles/1156619/Builder-Design-Pattern-with-Demo] - good example, and also refere to [https://medium.com/@ajinkyabadve/builder-design-patterns-in-java-1ffb12648850]



















